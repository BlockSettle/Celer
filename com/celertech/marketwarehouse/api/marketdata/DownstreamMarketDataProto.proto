package com.celertech.marketwarehouse.api.marketdata;

import "com/celertech/marketwarehouse/api/enums/MarketDataEntryTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/MarketDataTradingStatusTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/AggregationTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/AssetTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/ProductTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/MarketDataActionTypeProto.proto";
import "com/celertech/marketwarehouse/api/enums/MarketDataRequestRejectReasonProto.proto";
import "com/celertech/marketwarehouse/api/enums/RateSourceProto.proto";
import "com/celertech/marketwarehouse/api/enums/MarketDataQuoteTypeProto.proto";
import "com/celertech/marketwarehouse/api/marketdata/UpstreamMarketDataProto.proto";
import "com/celertech/marketwarehouse/api/marketdata/MarketDataMetadata.proto";

option java_package = "com.celertech.marketwarehouse.api.marketdata";

message MarketDataFullSnapshotDownstreamEvent {

	optional string marketDataRequestId = 1;
	optional com.celertech.marketwarehouse.api.enums.assettype.AssetType assetType = 2;
	optional string securityCode = 4;
	optional string securityId = 5;
	optional double totalTradedVolume = 6;
	optional int32 marketDepth = 7;
	optional int64 snapshotTimestampInMillis = 8;
	
	repeated MarketDataPriceLadderLevel marketDataPriceLadderLevel = 9;

	//To be removed.  Putting it at top level for market maker to distinguish between sources easily for now
	optional com.celertech.marketwarehouse.api.enums.ratesource.RateSource rateSource = 11;
	
	optional com.celertech.marketwarehouse.api.enums.producttype.ProductType productType = 12;
	optional string settlementType = 13;
	
	optional string maturityDate = 14;
	
	// If marketDataQuoteType == INDICATIVE & marketDataPriceLadderLevel is empty, the snapshot represents a LP destination quote withdraw
	optional com.celertech.marketwarehouse.api.enums.marketdataquotetype.MarketDataQuoteType marketDataQuoteType = 15;
	
	optional string priceBookType = 16;
	optional com.celertech.marketwarehouse.api.enums.aggregationtype.AggregationType aggregationType = 17;
	repeated string priceUpdateOriginator = 18;
	
	repeated KeyValue internalMarketDataMetadata = 19;
	optional string settlementDate = 20;
}

message MarketDataConversionRateChangedEvent {

	optional string clientRequestId = 1;
	optional com.celertech.marketwarehouse.api.enums.assettype.AssetType assetType = 2;
	optional string securityCode = 3;
	optional string securityId = 4;
	optional double midPrice = 5;
	optional int64 snapshotTimestampInMillis = 6;
}

message UpdateOnPriceBookConversionRateChangedRequest {

	optional string clientRequestId = 1;
}


message MarketDataPriceLadderLevel {
	optional int32 entryPosition = 1;
	optional MarketDataPriceSnapshotLevel bidLevel = 2;
	optional MarketDataPriceSnapshotLevel offerLevel = 3;
}

message MarketDataPriceSnapshotLevel {
	optional com.celertech.marketwarehouse.api.enums.marketdataentrytype.MarketDataEntryType marketDataEntryType = 1;
	optional string entryId = 2;
	optional string securityId = 3;
	optional double entryPrice = 4;
	optional double entrySize = 5;
	optional string entryOriginator = 6;
	optional string settlementType = 7;
    optional string settlementDate = 8;
    
    //repeated MarketDataPriceSnapshotLevel underlyingPriceLevels = 9;
    repeated MarketDataPriceEntry marketDataPriceEntry = 10;
    
    optional double forwardPoints = 11;
    optional double spotRate = 12;
    
    //used for swap
    //repeated MarketDataPriceSnapshotLevel instrumentLegPriceLevels = 13;

    //used for peer spot fx workflow
    optional double contraQty = 14;

    optional string fixingSource = 16;

    //used for bitcoin
    optional bytes transactionToken = 17;
    
    optional string currency = 18;
}

message MarketDataPriceEntry {
	optional double entryPrice = 1;
	optional double entrySize = 2;
	optional string entryOriginator = 3;
	optional double spotRate = 4;
	optional double forwardPoints = 5;
	optional string destinationKey = 7;
	
	//used for swap
	repeated MarketDataPriceSnapshotLevel instrumentLegPriceLevels = 6;
}

message MarketDataIncrementalDownstreamEvent {

    optional com.celertech.marketwarehouse.api.enums.assettype.AssetType assetType = 1;
    optional string marketDataRequestId = 2;
	optional string securityCode = 4;
	optional string securityId = 5;
	optional double totalTradedVolume = 6;
	optional int64 snapshotTimestampInMillis = 7;
	
	repeated MarketDataPriceSnapshotLevel marketDataPriceSnapshotLevel = 8;
	repeated int64 checkpointTimestamp = 9;

	message MarketDataPriceSnapshotLevel {
		optional com.celertech.marketwarehouse.api.enums.marketdataactiontype.MarketDataActionType marketDataActionType = 1;
		optional com.celertech.marketwarehouse.api.enums.marketdataentrytype.MarketDataEntryType marketDataEntryType = 2;
		optional string entryId = 3;
		optional double entryPrice = 4;
		optional double entrySize = 5;
		optional int32 entryPosition = 6;
		optional string entryOriginator = 7;
		optional string settlementType = 8;
        optional string settlementDate = 9;
  	}

	optional com.celertech.marketwarehouse.api.enums.ratesource.RateSource rateSource = 10;
}

message MarketDataRequestOverrideDownstreamEvent {

	optional string warehouseNode = 1;
	optional string securityCode = 2;
	optional string securityId = 3;
	optional com.celertech.marketwarehouse.api.enums.assettype.AssetType assetType = 4;
    optional com.celertech.marketwarehouse.api.enums.producttype.ProductType productType = 5;
	repeated com.celertech.marketwarehouse.api.marketdata.OverrideMarketDataPriceLadderLevel overrideMarketDataPriceLadderLevel = 6;

}

message MarketDataRequestRejectDownstreamEvent {

    optional string marketDataRequestId = 1;
    optional com.celertech.marketwarehouse.api.enums.marketdatarequestrejectreason.MarketDataRequestRejectReason marketDataRequestRejectReason = 2;
    optional string text = 3;

}

message MarketDataOverrideRejectDownstreamEvent {

    optional com.celertech.marketwarehouse.api.enums.marketdatarequestrejectreason.MarketDataRequestRejectReason marketDataRequestRejectReason = 1;
    optional string text = 2;

}

